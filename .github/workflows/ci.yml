name: CI

on:
  push:
    branches: [ main, develop, ci ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Verify dependencies
      run: go mod verify
      
    - name: Get dependencies
      run: go get -t ./...
      
    - name: Run tests
      run: make test
      
    - name: Run tests with coverage
      run: make test-coverage
      
    - name: Run tests with verbose output
      run: make test-verbose
      
    - name: Generate coverage report
      run: |
        go test -coverprofile=coverage.out ./internal/... ./cmd/...
        go tool cover -func=coverage.out
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true
        
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        
    - name: Run golangci-lint
      run: |
        $(go env GOPATH)/bin/golangci-lint run --timeout=5m
        
    - name: Check code formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true
        
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Build application
      run: make build
      
    - name: Verify binaries
      run: |
        ls -la bin/
        file bin/spaceapi
        file bin/spaceicon
        
    - name: Test binary execution
      run: |
        # Verify binaries are executable
        test -x ./bin/spaceapi
        test -x ./bin/spaceicon
        
        # Test spaceicon binary with invalid arguments (should show error and exit)
        ./bin/spaceicon || echo "spaceicon error test completed"
        
        # Test spaceicon with i3block flag but no URL (should show error and exit)
        ./bin/spaceicon --i3block || echo "spaceicon i3block error test completed"
        
        # Test spaceicon with a URL (should fail gracefully without hanging)
        timeout 5s ./bin/spaceicon http://localhost:9999/nonexistent || echo "spaceicon URL test completed"
        
        # Test spaceapi binary starts (should start server, we'll kill it quickly)
        timeout 2s ./bin/spaceapi || echo "spaceapi server test completed"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true
        
    - name: Install Gosec
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        
    - name: Run Gosec Security Scanner
      run: |
        gosec -no-fail -fmt sarif -out gosec.sarif ./... || echo "Gosec scan completed"
      continue-on-error: true
        
    - name: Verify SARIF file exists
      run: |
        if [ -f gosec.sarif ]; then
          echo "✓ SARIF file created successfully"
          ls -lh gosec.sarif
        else
          echo "⚠ SARIF file not found, creating empty report"
          echo '{"version":"2.1.0","runs":[]}' > gosec.sarif
        fi
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec.sarif
      continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: make docker-build
      
    - name: Test Docker image
      run: |
        docker run --rm -d --name spaceapi-test -p 8080:8080 spaceapi:latest
        sleep 5
        curl -f http://localhost:8080/health || exit 1
        docker stop spaceapi-test
