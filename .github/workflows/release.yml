# Copyright (C) 2025  pliski@q30.space
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper version detection
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        
        # Remove 'v' prefix if present for semantic versioning
        SEMVER=${VERSION#v}
        
        echo "version=$SEMVER" >> $GITHUB_OUTPUT
        echo "tag=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $SEMVER"
        echo "Tag: $VERSION"
    
    - name: Build binaries
      run: |
        # Build for multiple platforms
        mkdir -p dist
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o dist/spaceapi-linux-amd64 ./cmd/spaceapi
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o dist/spaceapi-linux-arm64 ./cmd/spaceapi
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o dist/spaceapi-windows-amd64.exe ./cmd/spaceapi
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o dist/spaceapi-darwin-amd64 ./cmd/spaceapi
        
        # macOS ARM64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o dist/spaceapi-darwin-arm64 ./cmd/spaceapi
        
        # Make binaries executable
        chmod +x dist/*
        
        # Create checksums
        cd dist
        sha256sum * > checksums.txt
        cd ..
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body: |
          ## SpaceAPI Endpoint ${{ steps.version.outputs.version }}
          
          ### What's New
          - Initial release of SpaceAPI Endpoint
          - SpaceAPI v15 compliant REST API server
          - Docker image with multi-architecture support
          - Comprehensive test suite with 96.1% coverage
          
          ### Downloads
          Pre-built binaries are available for multiple platforms:
          - Linux (AMD64, ARM64)
          - Windows (AMD64)
          - macOS (AMD64, ARM64)
          
          ### Docker Image
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          ```
          
          ### Quick Start
          1. Download the appropriate binary for your platform
          2. Copy `spaceapi.json.example` to `spaceapi.json` and configure
          3. Run: `./spaceapi` (or `spaceapi.exe` on Windows)
          4. Test: `curl http://localhost:8080/api/space`
          
          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed documentation.
        files: |
          dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.spaceapi
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.release.outputs.version }}
    
    - name: Update package visibility
      run: |
        # Make the package public (requires manual confirmation in GitHub UI)
        echo "Package created at: https://github.com/${{ github.repository }}/pkgs/container/spaceapi-endpoint"
        echo "To make it public:"
        echo "1. Go to the package page"
        echo "2. Click 'Package settings'"
        echo "3. Scroll down to 'Danger Zone'"
        echo "4. Click 'Change visibility' and select 'Public'"
